#!/bin/sh

# Copyright (c) 2012 Oregon State University
#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with this
# work for additional information regarding copyright ownership.  The ASF
# licenses this file to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
# License for the specific language governing permissions and limitations under
# the License.
#
# Puppet sub-sync hook to be used in conjuction with PDXCAT's puppet-sync [1].
# Much of this script was inspired from PDXCAT.
#
# [1] https://github.com/pdxcat/puppet-sync
# 
# Configuration:
#
# TODO: Make this configurable from git config

CWD=`pwd`
GITUSER='git'
GITSERVER='git.osuosl.org'
PUPPETSUPERPROJECT='puppet/puppet.git'
SSHKEY='/var/lib/gitolite/.ssh/id_rsa.puppet'
PUPPETUSER='puppet'
PUPPETSERVER='puppet2.osuosl.org'

REPO="${GITUSER}@${GITSERVER}:${PUPPETSUPERPROJECT}"
DEPLOY="/etc/puppet/environments"
SSH_ARGS="-i ${SSHKEY}"
PUPPETMASTER="${PUPPETUSER}@${PUPPETSERVER}"
SYNC_COMMAND="/usr/local/bin/puppetsubsync"

SUBSYNC="ssh ${SSH_ARGS} "${PUPPETMASTER}" "${SYNC_COMMAND}""

while read oldrev newrev refname
do
    BRANCH=`echo ${refname} | sed -n 's/^refs\/heads\///p'`
    if [[ "${newrev}" = "0000000000000000000000000000000000000000" ]]; then
        # Delete the environment.
        echo "Deleting environment. (${oldrev}, ${newrev}, ${refname})"
        ${SUBSYNC} --deploy "${DEPLOY}" --branch "${BRANCH}" --delete $@
    elif echo ${BRANCH} | egrep '^t_' > /dev/null; then
        # Make or update a test environment.
        echo "Detecting leading t_ on branchname, cloning a testing environment."
        ${SUBSYNC} --branch "${BRANCH}" --remote "${REPO}" --deploy "${DEPLOY}" --test $@
    else
        # Make or update a standard environment.
        echo "Cloning a standard environment."
        ${SUBSYNC} --branch "${BRANCH}" --remote "${REPO}" --deploy "${DEPLOY}" $@
    fi
done
